from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from states import Flow
from keyboards.ai_keyboards import (
    kb_ai_types,
    kb_categories,
    kb_prompts,
    kb_start_chat,
    kb_chat_back,
    kb_ai_types_with_history
)
from keyboards.main_keyboards import kb_start, kb_global
from promt.start_promt import WELCOME_TEXT

ai_picker_router = Router(name="ai_picker")


async def ai_entry(msg: Message, state: FSMContext) -> None:
    await state.set_state(Flow.choose_ai)
    await msg.answer("–®–∞–≥ 1/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ò–ò:", reply_markup=kb_ai_types_with_history())


@ai_picker_router.callback_query(Flow.choose_ai, F.data.startswith("ai:"))
async def choose_ai(cb: CallbackQuery, state: FSMContext) -> None:
    _, code = cb.data.split(":", 1)

    if code == "back":
        await cb.answer()
        await cb.message.edit_reply_markup(reply_markup=None)
        await cb.message.answer(WELCOME_TEXT, reply_markup=kb_start())
        await cb.message.answer("\u2063", reply_markup=kb_global())
        return

    await state.update_data(ai_type=code)
    await state.set_state(Flow.choose_cat)
    await cb.answer()
    await cb.message.edit_text(
        "–®–∞–≥ 2/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:",
        reply_markup=kb_categories(code),
    )


@ai_picker_router.callback_query(Flow.choose_cat, F.data.startswith("cat:"))
async def choose_cat(cb: CallbackQuery, state: FSMContext) -> None:
    _, code = cb.data.split(":", 1)

    if code == "back":
        await state.set_state(Flow.choose_ai)
        await cb.answer()
        await cb.message.edit_text(
            "–®–∞–≥ 1/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ò–ò:", reply_markup=kb_ai_types()
        )
        return

    await state.update_data(cat=code)
    await state.set_state(Flow.choose_prompt)
    await cb.answer()
    await cb.message.edit_text(
        "–®–∞–≥ 3/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç:",
        reply_markup=kb_prompts(code),
    )


@ai_picker_router.callback_query(Flow.choose_prompt, F.data.startswith("pr:"))
async def choose_prompt(cb: CallbackQuery, state: FSMContext) -> None:
    _, code = cb.data.split(":", 1)

    if code == "back":
        data = await state.get_data()
        await state.set_state(Flow.choose_cat)
        await cb.answer()
        await cb.message.edit_text(
            "–®–∞–≥ 2/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:",
            reply_markup=kb_categories(data["ai_type"]),
        )
        return

    await state.update_data(prompt=code)
    await cb.answer()
    await cb.message.edit_text(
        "–ì–æ—Ç–æ–≤–æ! –í—ã–±—Ä–∞–Ω—ã:\n"
        f"‚Ä¢ –ò–ò: <b>{(await state.get_data())['ai_type']}</b>\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{(await state.get_data())['cat']}</b>\n"
        f"‚Ä¢ –ü—Ä–æ–º—Ç: <b>{code}</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —á–∞—Ç¬ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–≥–ª—É—à–∫—É-–æ—Ç–≤–µ—Ç.",
        reply_markup=kb_start_chat(),
    )


@ai_picker_router.callback_query(Flow.choose_prompt, F.data == "confirm:back")
async def confirm_back(cb: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    await state.set_state(Flow.choose_prompt)
    await cb.answer()
    await cb.message.edit_text(
        "–®–∞–≥ 3/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç:",
        reply_markup=kb_prompts(data["cat"]),
    )


@ai_picker_router.callback_query(F.data == "chat:start")
async def chat_start(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞")
    await cb.message.edit_reply_markup(reply_markup=None)
    await cb.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
        reply_markup=kb_chat_back(),
    )


@ai_picker_router.callback_query(F.data == "chat:back")
async def chat_back(cb: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    await state.set_state(Flow.choose_prompt)
    await cb.answer()
    await cb.message.answer(
        "–ì–æ—Ç–æ–≤–æ! –í—ã–±—Ä–∞–Ω—ã:\n"
        f"‚Ä¢ –ò–ò: <b>{data['ai_type']}</b>\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{data['cat']}</b>\n"
        f"‚Ä¢ –ü—Ä–æ–º—Ç: <b>{data['prompt']}</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —á–∞—Ç¬ª, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
        reply_markup=kb_start_chat(),
    )


@ai_picker_router.message(Flow.choose_prompt)
async def dummy_answer(msg: Message, state: FSMContext) -> None:
    data = await state.get_data()
    reverse = msg.text.strip()[::-1] or "ü§ñ (–ø—É—Å—Ç–æ)"
    await msg.answer(
        f"–û—Ç–≤–µ—Ç <b>{data['ai_type']}-{data['prompt']}</b> ‚Üí {reverse}",
        reply_markup=kb_chat_back()
    )


@ai_picker_router.callback_query(Flow.choose_ai, F.data.startswith("history:"))
async def history_view(cb: CallbackQuery, state: FSMContext) -> None:
    page = int(cb.data.split(":")[1])
    mock_tasks = [
        ("text", "ads", "üìù –†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç"),
        ("image", "ghibli", "üé® –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"),
        ("audio", "tts", "üó£Ô∏è –û–∑–≤—É—á–∫–∞ –≥–æ–ª–æ—Å–æ–º"),
        ("video", "edit", "üé¨ –ú–æ–Ω—Ç–∞–∂ —Ä–æ–ª–∏–∫–∞"),
        ("text", "summ", "üì∞ –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"),
    ][(page-1)*3 : page*3]  # —Ç–æ–ª—å–∫–æ 3 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

    kb = [
        [InlineKeyboardButton(text=title, callback_data=f"restore:{ai}:{prompt}")]
        for ai, prompt, title in mock_tasks
    ]
    kb.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"history:{max(1, page - 1)}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"history:{page + 1}"),
    ])
    kb.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ai:back")
    ])

    await cb.answer()
    await cb.message.edit_text(
        f"üóÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )


@ai_picker_router.callback_query(Flow.choose_ai, F.data.startswith("restore:"))
async def restore_prev(cb: CallbackQuery, state: FSMContext) -> None:
    _, ai_type, prompt = cb.data.split(":")
    await state.update_data(ai_type=ai_type, prompt=prompt)

    await cb.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    await cb.message.edit_text(
        f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:\n"
        f"‚Ä¢ –ò–ò: <b>{ai_type}</b>\n"
        f"‚Ä¢ –ü—Ä–æ–º—Ç: <b>{prompt}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–±–æ—Ç—É.",
        reply_markup=kb_chat_back()
    )
    await state.set_state(Flow.choose_prompt)
