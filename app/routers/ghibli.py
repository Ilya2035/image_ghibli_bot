from __future__ import annotations

import io
from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile

from db.session import async_session
from crud.user_transactions import add_user
from crud.request_transactions import add_photo_request
from crud.stylize_transactions import stylize_from_db
from crud.save_transactions import save_output_to_db

photo_router = Router()


@photo_router.message(F.photo)
async def handle_photo(message: Message) -> None:
    """
    1. —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ (bytes)
    2. —Å–æ–∑–¥–∞—ë–º / –±–µ—Ä—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    3. –ø–∏—à–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î (status='processing')
    4. —à–ª—ë–º ¬´–∂–¥–∏—Ç–µ‚Ä¶¬ª
    5. –≤—ã–∑—ã–≤–∞–µ–º OpenAI ‚Üí –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    6. —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (status='done' / 'error')
    7. –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    bot = message.bot
    tg_id = str(message.from_user.id)
    photo = message.photo[-1]

    tg_file = await bot.get_file(photo.file_id)
    buf = io.BytesIO()
    await bot.download_file(tg_file.file_path, destination=buf)
    raw_bytes = buf.getvalue()

    async with async_session() as session:
        user = await add_user(session, tg_id)
        req = await add_photo_request(
            session,
            user_id=user.user_id,
            photo_bytes=raw_bytes,
        )

    await message.answer(
        "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ\n"
        "–†–∏—Å—É—é –≤ —Å—Ç–∏–ª–µ Ghibli, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶"
    )

    async with async_session() as session:
        result_bytes = await stylize_from_db(session, req.id)
        await save_output_to_db(session, req.id, result_bytes)

    if result_bytes:
        await message.answer_photo(
            BufferedInputFile(result_bytes, filename="ghibli.png"),  # ‚úî
            caption="–ì–æ—Ç–æ–≤–æ! üé®"
        )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üòî")
